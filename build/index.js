function asyncGeneratorStep(a,b,c,d,e,f,g){try{var h=a[f](g),i=h.value}catch(a){return void c(a)}h.done?b(i):Promise.resolve(i).then(d,e)}function _asyncToGenerator(a){return function(){var b=this,c=arguments;return new Promise(function(d,e){function f(a){asyncGeneratorStep(h,d,e,f,g,"next",a)}function g(a){asyncGeneratorStep(h,d,e,f,g,"throw",a)}var h=a.apply(b,c);f(void 0)})}}import{typeImages}from"./lookups.js";import{makePage,changePage,toggleNavArrows}from"./pagination.js";import{createPost,createDetailView}from"./makeContent.js";import{toggleContentVisibility}from"./toggleVisibility.js";// get a handle on the main box and next/previous buttons
const updatesBox=document.querySelector("#updates-box"),nextPageButton=document.querySelector("#updates-box-nav-right"),previousPageButton=document.querySelector("#updates-box-nav-left"),filter=document.querySelector("#cat-filter");// Variables for Pagination Functions
let currentPage=1;const postsPerPage=4;let numberOfPages,pageContents,length,selectedCategory="View All";const getPosts=/*#__PURE__*/function(){var a=_asyncToGenerator(function*(){try{const a=yield fetch("http://10.1.1.194:3001/api/getTop18"),b=yield a.json();return b}catch(a){console.error(a)}});return function(){return a.apply(this,arguments)}}(),createNewPage=function(a){// get the data for the page
// create the page & add detail view functionality
pageContents=makePage(a,currentPage,postsPerPage),pageContents.forEach(function(a){// create the post and return the updatesItem so that functionality can be added
const b=createPost(a,typeImages,updatesBox);// add detailView functionality to the created updatesItems
b.onclick=function(){toggleContentVisibility("none",updatesBox),nextPageButton.style.display="none",previousPageButton.style.display="none";// create the detail view + add functionality to the return arrow
const b=createDetailView(a,typeImages,updatesBox);b.onclick=function(){toggleContentVisibility("",updatesBox),toggleNavArrows(currentPage,numberOfPages,nextPageButton,previousPageButton)}};// get a handle on the img and title so that hover effects can jawn em up
let[c,d]=[...b.children];// change background and link color on hover, remove them on mouse leave
b.onmouseenter=function(){b.style.cursor="pointer",d.style.color="#03688d",c.style.background="#03688D"},b.onmouseleave=function(){b.style.cursor="",d.style.color="",c.style.background="url('".concat(a.img,"') center no-repeat")}})},getPageData=/*#__PURE__*/function(){var a=_asyncToGenerator(function*(a){const b=getPosts();b.then(function(b){return a&&(b=b.filter(function(b){return b.type===a}),currentPage=1,!b.length)?(numberOfPages=1,toggleNavArrows(currentPage,numberOfPages,nextPageButton,previousPageButton),void noPosts()):void(// calculate length to determine how many pages to create from the data set or show noPosts message
// update the navigation arrows based on the results of the filter
length=b.length,numberOfPages=Math.ceil(length/postsPerPage),toggleNavArrows(currentPage,numberOfPages,nextPageButton,previousPageButton),createNewPage(b))})});return function(){return a.apply(this,arguments)}}(),navButtonClick=function(a){// update currentPage and clear updatesBox of old content
currentPage=changePage(a,currentPage,updatesBox),"View All"===selectedCategory?getPageData():getPageData(selectedCategory),toggleNavArrows(currentPage,numberOfPages,nextPageButton,previousPageButton)};/****** New Page + Data Functions ******/ // general function to create new page
nextPageButton.onclick=function(){return navButtonClick("next")},previousPageButton.onclick=function(){return navButtonClick("")};/****** Category Filter ******/const filterCategories=function(){// clear the jawn (while(parent.firstChild) is apparently faster than parent.innerHTML = '')
for(selectedCategory=filter.options[filter.selectedIndex].text.trim();updatesBox.firstChild;)updatesBox.removeChild(updatesBox.firstChild);// call getPageData with the included filter (or lack thereof)
"View All"===selectedCategory?getPageData():getPageData(selectedCategory)};filter.onchange=function(){return filterCategories()};// handle a no posts case
const noPosts=function(){const a=document.createElement("h2");for(a.textContent="No posts found",a.id="no-results-post-filter";updatesBox.firstChild;)updatesBox.removeChild(updatesBox.firstChild);updatesBox.appendChild(a)};// on load, create the first page (with db, getPageData will be refactored to return a data PROMISE, which will replace all instances of dummyData etc., and then createNewPage() will be called here w/that object instead)
getPageData();